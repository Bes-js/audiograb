{"version":3,"sources":["../src/services/recorder.ts"],"names":["spawn","ffmpeg","os","EventEmitter","EventType","_Recorder","recorderOptions","format","codec","bitrate","device","path","_a","_b","_c","platform","outputFormat","encoder","inputDevice","ffmpegPath","data","error","__name","Recorder"],"mappings":"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","sourcesContent":["import { spawn, ChildProcess } from 'child_process';\r\nimport ffmpeg from '@ffmpeg-installer/ffmpeg';\r\nimport os from 'os';\r\nimport { EventEmitter } from 'events';\r\n\r\nexport enum EventType {\r\n    RecordStarted = 'recordStarted',\r\n    RecordStopped = 'recordStopped',\r\n    RecordPaused = 'recordPaused',\r\n    RecordResumed = 'recordResumed',\r\n    FFmpegInformation = 'ffmpegInformation',\r\n    AudioData = 'audioData',\r\n}\r\n\r\nexport interface RecorderEvents {\r\n    recordStarted: [];\r\n    audioData: [Buffer];\r\n    ffmpegInformation: [string];\r\n    recordStopped: [];\r\n    recordPaused: [boolean];\r\n    recordResumed: [boolean];\r\n}\r\n\r\n/** \r\n* Recorder class\r\n* @class Recorder\r\n* @constructor\r\n* @public\r\n* @type {Recorder}\r\n* @description - Recorder class for recording audio from input devices\r\n* @requires ffmpeg\r\n* @extends EventEmitter\r\n* @param {Object} recorderOptions - Recorder options\r\n* @param {string} [recorderOptions.ffmpegPath] - Path to ffmpeg binary\r\n* @param {boolean} [recorderOptions.$debug] - Enable debug mode\r\n* @param {string} [recorderOptions.-i] - Input device\r\n* @param {string} [recorderOptions.-b:a] - Audio bitrate\r\n* @param {string} [recorderOptions.-c:a] - Audio codec\r\n* @param {string} [recorderOptions.-f] - Input format\r\n* @param {string} [recorderOptions.-of] - Output format\r\n* @example \r\n* const recorder = new Recorder({\r\n*    '-i': 'Microphone',\r\n* }).setFormat('dshow');\r\n*/\r\nexport default class Recorder extends EventEmitter <RecorderEvents> {\r\n    private ffmpeg: ChildProcess | null;\r\n    private recorderOptions: {\r\n        ffmpegPath?: string;\r\n        $debug?: boolean;\r\n        '-i'?: string;\r\n        '-b:a'?: string;\r\n        '-c:a'?: string;\r\n        '-f'?: 'dshow' | 'avfoundation' | 'alsa' | string;\r\n        '-of'?: 'mp3' | string;\r\n    };\r\n    public recording: boolean;\r\n    public paused: boolean;\r\n\r\n    constructor(recorderOptions: {\r\n        ffmpegPath?: string;\r\n        $debug?: boolean;\r\n        '-i'?: string;\r\n        '-b:a'?: string;\r\n        '-c:a'?: string;\r\n        '-f'?: 'dshow' | 'avfoundation' | 'alsa' | string;\r\n        '-of'?: 'mp3' | string;\r\n    } = { \r\n        $debug: false\r\n     }) {\r\n        super();\r\n        this.ffmpeg = null;\r\n        this.recorderOptions = recorderOptions;\r\n        this.recording = false;\r\n        this.paused = false;\r\n\r\n    }\r\n\r\n    /**\r\n     * Set the input format\r\n     * @param {'dshow' | 'avfoundation' | 'alsa' | string} format - Input format\r\n     * @returns {Recorder}\r\n     * @type {Recorder}\r\n     * @public\r\n     * @description - Set the input format\r\n     * @method setFormat\r\n     * @example\r\n     * const recorder = new Recorder().setFormat('dshow');\r\n     * @example\r\n     * const recorder = new Recorder().setFormat('avfoundation');\r\n     */\r\n    setFormat(format: 'dshow' | 'avfoundation' | 'alsa' | string) {\r\n        this.recorderOptions['-f'] = format;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the audio codec\r\n     * @param {string} codec - Audio codec\r\n     * @returns {Recorder}\r\n     * @type {Recorder}\r\n     * @public\r\n     * @description - Set the audio codec\r\n     * @method setAudioCodec\r\n     * @example\r\n     * const recorder = new Recorder().setAudioCodec('libmp3lame');\r\n     * @example\r\n     * const recorder = new Recorder().setAudioCodec('aac');\r\n     */\r\n    setAudioCodec(codec: string) {\r\n        this.recorderOptions['-c:a'] = codec;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the audio bitrate\r\n     * @param {string} bitrate - Audio bitrate\r\n     * @returns {Recorder}\r\n     * @type {Recorder}\r\n     * @public\r\n     * @description - Set the audio bitrate\r\n     * @method setBitrate\r\n     * @example\r\n     * const recorder = new Recorder().setBitrate('128k');\r\n     * @example\r\n     * const recorder = new Recorder().setBitrate('256k');\r\n     */\r\n    setBitrate(bitrate: string) {\r\n        this.recorderOptions['-b:a'] = bitrate;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the input device\r\n     * @param {string} device - Input device\r\n     * @returns {Recorder}\r\n     * @type {Recorder}\r\n     * @public\r\n     * @description - Set the input device\r\n     * @method setInputDevice\r\n     * @example\r\n     * const recorder = new Recorder().setInputDevice('Microphone');\r\n     * @example\r\n     * const recorder = new Recorder().setInputDevice('Microphone (5- USB PnP Sound Device)');\r\n     */\r\n    setInputDevice(device: string) {\r\n        this.recorderOptions['-i'] = device;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the output format\r\n     * @param {string} format - Output format\r\n     * @returns {Recorder}\r\n     * @type {Recorder}\r\n     * @public\r\n     * @description - Set the output format\r\n     * @method setOutputFormat\r\n     * @example\r\n     * const recorder = new Recorder().setOutputFormat('mp3');\r\n     * @example\r\n     * const recorder = new Recorder().setOutputFormat('wav');\r\n     */\r\n    setOutputFormat(format: 'mp3' | string) {\r\n        this.recorderOptions['-of'] = format;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the path to the ffmpeg binary\r\n     * @param {string} path - Path to ffmpeg binary\r\n     * @returns {Recorder}\r\n     * @type {Recorder}\r\n     * @public\r\n     * @description - Set the path to the ffmpeg binary\r\n     * @method setFfmpegPath\r\n     * @example\r\n     * const recorder = new Recorder().setFfmpegPath('/path/to/ffmpeg');\r\n     */\r\n    setFfmpegPath(path: string) {\r\n        this.recorderOptions.ffmpegPath = path;\r\n        return this;\r\n    }\r\n\r\n\r\n    /*\r\n    public emit<K extends keyof RecorderEvents>(eventName: K, ...args: RecorderEvents[K]): boolean {\r\n        return super.emit(eventName, ...args);\r\n    }\r\n\r\n    public on<K extends keyof RecorderEvents>(eventName: K, listener: (...args: RecorderEvents[K]) => void): this {\r\n        return super.on(eventName, listener);\r\n    }\r\n    */\r\n\r\n\r\n    /**\r\n     * Start recording\r\n     * @returns {void}\r\n     * @type {void}\r\n     * @public\r\n     * @description - Start recording\r\n     * @method start\r\n     * @example\r\n     * const recorder = new Recorder().start();\r\n     */\r\n    public start() {\r\n        if (this.recording && this.recorderOptions.$debug) {\r\n            console.log('Recording is already in progress.');\r\n            return;\r\n        }\r\n\r\n        this.emit('recordStarted');\r\n\r\n        const platform = os.platform();\r\n        const format = this.recorderOptions['-f'] ? this.recorderOptions['-f'] : platform === 'win32' ? 'dshow' : platform === 'darwin' ? 'avfoundation' : platform === 'linux' ? 'alsa' : 'alsa';\r\n        const outputFormat = this.recorderOptions['-of'] ? this.recorderOptions['-of'] : 'mp3';\r\n        const encoder = this.recorderOptions['-c:a'] ? this.recorderOptions['-c:a'] : 'libmp3lame';\r\n        const bitrate = this.recorderOptions['-b:a'] ? this.recorderOptions['-b:a'] : '128k';\r\n        const inputDevice = this.recorderOptions['-i'] ? this.recorderOptions['-i'] : platform === 'win32' ? 'Microphone' : platform === 'darwin' ? ':0' : platform === 'linux' ? 'default' : 'Microphone' ;\r\n        const ffmpegPath = this.recorderOptions.ffmpegPath ? this.recorderOptions.ffmpegPath : ffmpeg.path;\r\n        \r\n        this.ffmpeg = spawn(ffmpegPath, [\r\n            '-f', format,\r\n            '-i', `audio=${inputDevice}`,\r\n            '-c:a', encoder,\r\n            '-b:a', bitrate,\r\n            '-f', outputFormat,\r\n            'pipe:1',\r\n        ]);\r\n\r\n        this.ffmpeg.stdout?.on('data', (data: Buffer) => {this.emit('audioData', data);});\r\n        this.recording = true;\r\n        this.ffmpeg.stderr?.on('data', (data: Buffer) => {this.emit('ffmpegInformation', data.toString());});\r\n        this.ffmpeg.stdin?.on('error', (error) => {this.emit('ffmpegInformation', error.message);});\r\n        this.ffmpeg.on('error', (error) => {this.emit('ffmpegInformation', error.message);});\r\n        this.ffmpeg.on('close', () => {this.emit('recordStopped');this.recording = false; this.paused = false;});\r\n    }\r\n\r\n    /**\r\n     * Stop recording\r\n     * @returns {void}\r\n     * @type {void}\r\n     * @public\r\n     * @description - Stop recording\r\n     * @method stop\r\n     * @example\r\n     * const recorder = new Recorder().stop();\r\n     */\r\n    public stop() {\r\n        if (this.recording) {\r\n            if (this.ffmpeg) {\r\n                this.ffmpeg.kill('SIGINT');\r\n                this.recording = false;\r\n                this.paused = false;\r\n                if(this.recorderOptions.$debug) {\r\n                console.log('Recording stopped.');\r\n                }\r\n            }\r\n        } else {\r\n            if(this.recorderOptions.$debug) {\r\n            console.log('No recording is in progress.');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Pause recording\r\n     * @returns {void}\r\n     * @type {void}\r\n     * @public\r\n     * @description - Pause recording\r\n     * @method pause\r\n     * @example\r\n     * const recorder = new Recorder().pause();\r\n     */\r\n    public pause() {\r\n        if (this.recording && !this.paused) {\r\n            if (this.ffmpeg) {\r\n                this.ffmpeg.kill('SIGSTOP');\r\n                this.paused = true;\r\n                this.emit('recordPaused',this.paused);\r\n                if(this.recorderOptions.$debug) {\r\n                console.log('Recording paused.');\r\n                }\r\n            }\r\n        } else if (this.paused) {\r\n            if(this.recorderOptions.$debug) {\r\n            console.log('Recording is already paused.');\r\n            }\r\n        } else {\r\n            if(this.recorderOptions.$debug) {\r\n            console.log('No recording is in progress.');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume recording\r\n     * @returns {void}\r\n     * @type {void}\r\n     * @public\r\n     * @description - Resume recording\r\n     * @method resume\r\n     * @example\r\n     * const recorder = new Recorder().resume();\r\n     */\r\n    public resume() {\r\n        if (this.recording && this.paused) {\r\n            if (this.ffmpeg) {\r\n                this.ffmpeg.kill('SIGCONT');\r\n                this.paused = false;\r\n                this.emit('recordResumed',this.paused);\r\n                if(this.recorderOptions.$debug) {\r\n                console.log('Recording resumed.');\r\n                }\r\n            }\r\n        } else if (!this.paused) {\r\n            if(this.recorderOptions.$debug) {\r\n            console.log('Recording is not paused.');\r\n            }\r\n        } else {\r\n            if(this.recorderOptions.$debug) {\r\n            console.log('No recording is in progress.');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n"]}